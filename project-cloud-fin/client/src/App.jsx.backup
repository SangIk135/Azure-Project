import React, { useState, useEffect } from 'react';
import styled, { createGlobalStyle } from 'styled-components';
/**
 * npm create vite@latest . -- --template react
npm install
npm install axios
npm run dev
 */
// --- 전역 스타일 ---
const GlobalStyle = createGlobalStyle`
  body {
    background-color: #0f172a;
    color: #ffffff;
    font-family: 'Inter', sans-serif;
    margin: 0;
  }
  ::-webkit-scrollbar { width: 8px; }
  ::-webkit-scrollbar-track { background: #1e293b; }
  ::-webkit-scrollbar-thumb { background: #6366f1; border-radius: 4px; }
  ::-webkit-scrollbar-thumb:hover { background: #4f46e5; }
`;

// --- 아이콘 컴포넌트 ---
const MusicIcon = (props) => ( <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M9 18V5l12-2v13"/><circle cx="6" cy="18" r="3"/><circle cx="18" cy="16" r="3"/></svg> );
const HomeIcon = () => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline></svg> );
const PlaylistIcon = (props) => ( <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="8" y1="6" x2="21" y2="6"></line><line x1="8" y1="12" x2="21" y2="12"></line><line x1="8" y1="18" x2="21" y2="18"></line><line x1="3" y1="6" x2="3.01" y2="6"></line><line x1="3" y1="12" x2="3.01" y2="12"></line><line x1="3" y1="18" x2="3.01" y2="18"></line></svg> );
const SearchIcon = () => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg> );
const PlusIcon = () => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg> );
const LogoutIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path><polyline points="16 17 21 12 16 7"></polyline><line x1="21" y1="12" x2="9" y2="12"></line></svg>);
const TrashIcon = () => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg>);

// --- 공용 스타일 컴포넌트 ---
const PageContainer = styled.div` padding: 2.5rem; @media (max-width: 768px) { padding: 1.5rem; } `;
const Button = styled.button`
  display: inline-flex; align-items: center; justify-content: center; gap: 0.5rem;
  background-color: ${props => props.danger ? '#dc2626' : (props.secondary ? '#334155' : '#4f46e5')};
  color: white; font-weight: 600; padding: 0.75rem 1.5rem;
  border-radius: 0.5rem; border: none; cursor: pointer; transition: background-color 0.2s;
  &:hover { background-color: ${props => props.danger ? '#b91c1c' : (props.secondary ? '#475569' : '#4338ca')}; }
`;
const Input = styled.input`
  width: 100%; padding: 0.75rem 1rem; background-color: #1e293b; color: white;
  border: 1px solid #334155; border-radius: 0.5rem; font-size: 1rem; box-sizing: border-box;
  &:focus { outline: none; border-color: #4f46e5; }
`;
const FormContainer = styled.div` max-width: 400px; margin: 4rem auto; padding: 2rem; background-color: #1e293b; border-radius: 0.75rem; `;
const Form = styled.form` display: flex; flex-direction: column; gap: 1.5rem; `;
const FormGroup = styled.div` display: flex; flex-direction: column; gap: 0.5rem; `;
const FormTitle = styled.h1` text-align: center; font-size: 1.875rem; font-weight: 700; margin-bottom: 2rem; `;
const FormLink = styled.p` text-align: center; color: #94a3b8; margin-top: 1.5rem; & > span { color: #818cf8; cursor: pointer; text-decoration: underline; }`;
const Grid = styled.div` display: grid; gap: 1.5rem; grid-template-columns: repeat(auto-fill, minmax(180px, 1fr)); `;
const PlaylistItem = styled.div`
  cursor: pointer;
  .image-container {
    aspect-ratio: 1 / 1; background-color: #1e293b; border-radius: 0.5rem; overflow: hidden;
    position: relative; box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1); transition: transform 0.3s;
    &:hover { transform: scale(1.05); }
    img { width: 100%; height: 100%; object-fit: cover; }
    .overlay { position: absolute; inset: 0; background-color: rgba(0,0,0,0.4); display: flex; align-items: flex-end; padding: 1rem; }
    h3 { color: white; font-size: 1.125rem; font-weight: 700; margin: 0; }
  }
  p { color: #94a3b8; margin-top: 0.5rem; font-size: 0.875rem; font-weight: 500; }
`;

// --- 페이지 컴포넌트 ---

// 홈 (메인) 페이지
function HomePage({ user, setPage, setContext }) {
    const [publicPlaylists, setPublicPlaylists] = useState([]);

    useEffect(() => {
        // BE: 서버로부터 공개 플레이리스트 목록을 가져옵니다.
        // const fetchPublicPlaylists = async () => {
        //   try {
        //     const response = await axios.get('/api/playlists/public');
        //     setPublicPlaylists(response.data);
        //   } catch (error) { console.error("Error fetching public playlists:", error); }
        // };
        // fetchPublicPlaylists();
        console.log("홈페이지: 공개 플레이리스트 데이터를 가져옵니다.");
    }, []);

    const handlePlaylistClick = (playlistId) => {
        setContext({ playlistId });
        setPage('playlistDetail');
    };

    return (
        <PageContainer>
            <h1 style={{fontSize: '1.875rem', fontWeight: '700', marginBottom: '0.5rem'}}>안녕하세요, {user ? user.nickname : '방문자'}님!</h1>
            <p style={{color: '#94a3b8', marginBottom: '2.5rem'}}>다른 사용자들의 플레이리스트를 둘러보세요.</p>
            {publicPlaylists.length > 0 ? (
                <Grid>
                    {publicPlaylists.map(playlist => (
                        <PlaylistItem key={playlist.playlist_id} onClick={() => handlePlaylistClick(playlist.playlist_id)}>
                            <div className="image-container">
                                <img src={`https://placehold.co/300x300/f97316/ffffff?text=${encodeURI(playlist.name)}`} alt={playlist.name} />
                                <div className="overlay"><h3>{playlist.name}</h3></div>
                            </div>
                            <p>by {playlist.creator_nickname}</p>
                        </PlaylistItem>
                    ))}
                </Grid>
            ) : (
                <div style={{textAlign: 'center', padding: '4rem 0', color: '#64748b' }}>
                    <p>표시할 공개 플레이리스트가 없습니다.</p>
                </div>
            )}
        </PageContainer>
    );
}

// 로그인 페이지
function LoginPage({ setPage, setUser }) {
    const handleLogin = (e) => {
        e.preventDefault();
        console.log("로그인 시도");
        // BE: 로그인 API를 호출합니다.
        // const formData = new FormData(e.target);
        // const data = Object.fromEntries(formData.entries());
        // axios.post('/api/auth/login', data)
        //   .then(response => {
        //     setUser(response.data.user);
        //     localStorage.setItem('token', response.data.token);
        //     setPage('home');
        //   })
        //   .catch(error => console.error("Login failed:", error));
        setUser({ nickname: '테스트유저' });
        setPage('home');
    };
    return (
        <FormContainer>
            <FormTitle>로그인</FormTitle>
            <Form onSubmit={handleLogin}>
                <FormGroup>
                    <label htmlFor="email">이메일</label>
                    <Input type="email" id="email" name="email" required />
                </FormGroup>
                <FormGroup>
                    <label htmlFor="password">비밀번호</label>
                    <Input type="password" id="password" name="password" required />
                </FormGroup>
                <Button type="submit">로그인</Button>
            </Form>
            <FormLink>계정이 없으신가요? <span onClick={() => setPage('signup')}>회원가입</span></FormLink>
        </FormContainer>
    );
}

// 회원가입 페이지
function SignUpPage({ setPage }) {
    const handleSignUp = (e) => {
        e.preventDefault();
        console.log("회원가입 시도");
        // BE: 회원가입 API를 호출합니다.
        // const formData = new FormData(e.target);
        // const data = Object.fromEntries(formData.entries());
        // axios.post('/api/auth/signup', data)
        //   .then(() => {
        //     alert('회원가입이 완료되었습니다.');
        //     setPage('login');
        //   })
        //   .catch(error => console.error("Sign up failed:", error));
        setPage('login');
    };
    return (
        <FormContainer>
            <FormTitle>회원가입</FormTitle>
            <Form onSubmit={handleSignUp}>
                <FormGroup> <label htmlFor="email">이메일</label> <Input type="email" id="email" name="email" required /> </FormGroup>
                <FormGroup> <label htmlFor="password">비밀번호</label> <Input type="password" id="password" name="password" required /> </FormGroup>
                <FormGroup> <label htmlFor="nickname">닉네임</label> <Input type="text" id="nickname" name="nickname" required /> </FormGroup>
                <Button type="submit">회원가입</Button>
            </Form>
            <FormLink>이미 계정이 있으신가요? <span onClick={() => setPage('login')}>로그인</span></FormLink>
        </FormContainer>
    );
}

// 내 플레이리스트 페이지
function MyPlaylistsPage({ setPage, setContext }) {
    const [myPlaylists, setMyPlaylists] = useState([]);

    useEffect(() => {
        // BE: 현재 사용자의 플레이리스트 목록을 가져옵니다.
        // const fetchMyPlaylists = async () => {
        //   try {
        //     const response = await axios.get('/api/playlists/mine', { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } });
        //     setMyPlaylists(response.data);
        //   } catch (error) { console.error("Error fetching my playlists:", error); }
        // };
        // fetchMyPlaylists();
        console.log("내 플레이리스트: 데이터를 가져옵니다.");
    }, []);
    
    const handlePlaylistClick = (playlistId) => {
        setContext({ playlistId });
        setPage('playlistDetail');
    };

    return (
        <PageContainer>
            <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '2rem'}}>
                <h1 style={{fontSize: '1.875rem', fontWeight: '700'}}>내 플레이리스트</h1>
                <Button onClick={() => setPage('createPlaylist')}><PlusIcon /><span>새 플레이리스트</span></Button>
            </div>
            {myPlaylists.length > 0 ? (
                <Grid>
                    {myPlaylists.map(playlist => (
                        <PlaylistItem key={playlist.playlist_id} onClick={() => handlePlaylistClick(playlist.playlist_id)}>
                            <div className="image-container">
                                <img src={`https://placehold.co/300x300/8b5cf6/ffffff?text=${encodeURI(playlist.name)}`} alt={playlist.name} />
                                <div className="overlay"><h3>{playlist.name}</h3></div>
                            </div>
                            <p>{playlist.song_count || 0}곡</p>
                        </PlaylistItem>
                    ))}
                </Grid>
            ) : (
                <div style={{textAlign: 'center', padding: '5rem 0', backgroundColor: '#1e293b', borderRadius: '0.5rem'}}>
                    <PlaylistIcon style={{ margin: '0 auto', height: '4rem', width: '4rem', color: '#64748b' }} />
                    <p style={{marginTop: '1rem', color: '#94a3b8'}}>플레이리스트가 없습니다.</p>
                    <Button onClick={() => setPage('createPlaylist')} style={{marginTop: '1.5rem'}}><PlusIcon /><span>첫 플레이리스트 만들기</span></Button>
                </div>
            )}
        </PageContainer>
    );
}

// 플레이리스트 상세 페이지
function PlaylistDetailPage({ setPage, playlistId, user }) {
    const [playlist, setPlaylist] = useState(null);

    useEffect(() => {
        if (!playlistId) return;
        // BE: playlistId를 이용해 플레이리스트 상세 정보(곡 목록 포함)를 가져옵니다.
        // const fetchPlaylistDetails = async () => {
        //   try {
        //     const response = await axios.get(`/api/playlists/${playlistId}`);
        //     setPlaylist(response.data);
        //   } catch (error) { console.error('Error fetching playlist details:', error); }
        // };
        // fetchPlaylistDetails();
        console.log(`${playlistId}번 플레이리스트 상세 정보를 가져옵니다.`);
    }, [playlistId]);

    const SongItem = styled.div`
      display: flex; align-items: center; padding: 0.75rem; border-radius: 0.5rem;
      &:hover { background-color: #1e293b; }
      .delete-btn { opacity: 0; transition: opacity 0.2s; }
      &:hover .delete-btn { opacity: 1; }
    `;

    if (!playlist) {
        return <PageContainer><p>플레이리스트를 불러오는 중입니다...</p></PageContainer>;
    }

    // const isOwner = user?.nickname === playlist.creator_nickname;

    return (
        <PageContainer>
            <div style={{display: 'flex', gap: '2rem', marginBottom: '2rem', alignItems: 'flex-end'}}>
                <img src={`https://placehold.co/300x300/f97316/ffffff?text=${encodeURI(playlist.name)}`} alt={playlist.name} style={{width: '12rem', height: '12rem', borderRadius: '0.5rem', boxShadow: '0 20px 25px -5px rgb(0 0 0 / 0.1)'}} />
                <div>
                    <p style={{fontSize: '0.875rem', color: '#94a3b8'}}>플레이리스트</p>
                    <h1 style={{fontSize: '3rem', fontWeight: 'bold', margin: '0.5rem 0'}}>{playlist.name}</h1>
                    <p style={{color: '#94a3b8', marginTop: '1rem'}}>
                        <span>by {playlist.creator_nickname}</span><span style={{margin: '0 0.5rem'}}>•</span><span>{playlist.songs.length}곡</span>
                    </p>
                </div>
            </div>
            {/* {isOwner && ( */}
            <div style={{display: 'flex', gap: '1rem', marginBottom: '1.5rem'}}>
                <Button onClick={() => setPage('search')}><PlusIcon /> 곡 추가하기</Button>
                <Button danger><TrashIcon /> 삭제하기</Button>
            </div>
            {/* )} */}
            <div>
                {playlist.songs.map((song, index) => (
                    <SongItem key={song.song_id}>
                        <div style={{width: '2rem', color: '#94a3b8'}}>{index + 1}</div>
                        <div style={{flexGrow: 1}}>
                            <p style={{fontWeight: 600, margin: 0}}>{song.title}</p>
                            <p style={{fontSize: '0.875rem', color: '#94a3b8', margin: 0}}>{song.artist || '아티스트 정보 없음'}</p>
                        </div>
                        <button className="delete-btn" style={{background: 'none', border: 'none', color: '#94a3b8', cursor: 'pointer'}}><TrashIcon /></button>
                    </SongItem>
                ))}
            </div>
        </PageContainer>
    );
}


// 새 플레이리스트 만들기 페이지
function CreatePlaylistPage({ setPage }) {
    const handleCreate = (e) => {
        e.preventDefault();
        console.log("새 플레이리스트 생성 시도");
        // BE: 새 플레이리스트 생성 API를 호출합니다.
        // const formData = new FormData(e.target);
        // const data = {
        //   name: formData.get('name'), description: formData.get('description'), is_public: formData.get('is_public') === 'on'
        // };
        // axios.post('/api/playlists', data, { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } })
        //   .then(() => {
        //     alert('플레이리스트가 생성되었습니다.');
        //     setPage('myPlaylists');
        //   })
        //   .catch(error => console.error("Playlist creation failed:", error));
        setPage('myPlaylists');
    };
    return (
        <PageContainer>
             <h1 style={{fontSize: '1.875rem', fontWeight: '700', marginBottom: '2rem'}}>새 플레이리스트 만들기</h1>
            <Form onSubmit={handleCreate} style={{maxWidth: '600px'}}>
                <FormGroup> <label htmlFor="name">이름</label> <Input type="text" id="name" name="name" required placeholder="플레이리스트 제목" /> </FormGroup>
                <FormGroup> <label htmlFor="description">설명</label> <Input as="textarea" rows="4" id="description" name="description" placeholder="플레이리스트에 대한 간단한 설명" /> </FormGroup>
                <FormGroup style={{flexDirection: 'row', alignItems: 'center', gap: '1rem'}}>
                     <input type="checkbox" id="is_public" name="is_public" defaultChecked style={{width: '1rem', height: '1rem'}}/>
                    <label htmlFor="is_public">공개 플레이리스트로 설정</label>
                </FormGroup>
                <div style={{display: 'flex', gap: '1rem', marginTop: '1rem'}}>
                    <Button type="submit">만들기</Button>
                    <Button type="button" secondary onClick={() => setPage('myPlaylists')}>취소</Button>
                </div>
            </Form>
        </PageContainer>
    );
}

// 검색 페이지
function SearchPage() {
    const [searchTerm, setSearchTerm] = useState('');
    const [results, setResults] = useState([]);
    const [showPlaylistModal, setShowPlaylistModal] = useState(false);
    const [selectedSong, setSelectedSong] = useState(null);
    const [userPlaylists, setUserPlaylists] = useState([]);

    const handleSearch = (e) => {
        e.preventDefault();
        if (!searchTerm) return;
        console.log(`"${searchTerm}" 검색`);
        // BE: 노래 검색 API를 호출합니다.
        // axios.get(`/api/songs/search?q=${searchTerm}`)
        //   .then(response => setResults(response.data))
        //   .catch(error => console.error("Search failed:", error));
    };

    const handleAddClick = (song) => {
        setSelectedSong(song);
        console.log(`${song.title} 추가 버튼 클릭`);
        // BE: 사용자의 플레이리스트 목록을 가져옵니다.
        // axios.get('/api/playlists/mine', { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } })
        //  .then(response => { setUserPlaylists(response.data); setShowPlaylistModal(true); })
        //  .catch(error => console.error("Failed to fetch user playlists:", error));
        setUserPlaylists([{playlist_id: 1, name: '나의 첫 플리'}, {playlist_id: 2, name: '드라이브'}]);
        setShowPlaylistModal(true);
    };

    const handleAddToPlaylist = (playlistId) => {
         console.log(`${selectedSong.title}을(를) ${playlistId}번 플레이리스트에 추가`);
        // BE: 선택한 플레이리스트에 노래를 추가하는 API를 호출합니다.
        // axios.post(`/api/playlists/${playlistId}/songs`, { songId: selectedSong.id }, { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } })
        //   .then(() => {
        //     alert(`${selectedSong.title}을(를) 플레이리스트에 추가했습니다.`);
        //     setShowPlaylistModal(false); setSelectedSong(null);
        //   })
        //   .catch(error => console.error("Failed to add song:", error));
         setShowPlaylistModal(false);
    };
    
    const ModalListItem = styled.li`
        padding: 0.75rem; cursor: pointer; border-radius: 0.25rem;
        &:hover { background-color: #334155; }
    `;

    const PlaylistSelectModal = () => (
        <div style={{position: 'fixed', inset: 0, backgroundColor: 'rgba(0,0,0,0.7)', display: 'flex', justifyContent: 'center', alignItems: 'center', zIndex: 10}}>
            <div style={{background: '#1e293b', padding: '2rem', borderRadius: '0.5rem', width: '300px'}}>
                <h3 style={{marginTop: 0}}>플레이리스트에 추가</h3>
                {userPlaylists.length > 0 ? (
                    <ul style={{listStyle: 'none', padding: 0, margin: 0, maxHeight: '200px', overflowY: 'auto'}}>
                        {userPlaylists.map(pl => (
                            <ModalListItem key={pl.playlist_id} onClick={() => handleAddToPlaylist(pl.playlist_id)}>
                                {pl.name}
                            </ModalListItem>
                        ))}
                    </ul>
                ) : <p>플레이리스트가 없습니다.</p>}
                <Button secondary onClick={() => setShowPlaylistModal(false)} style={{width: '100%', marginTop: '1rem'}}>닫기</Button>
            </div>
        </div>
    );

    return (
        <PageContainer>
            {showPlaylistModal && <PlaylistSelectModal />}
            <h1 style={{fontSize: '1.875rem', fontWeight: '700', marginBottom: '1.5rem'}}>음악 검색</h1>
            <Form onSubmit={handleSearch} style={{display: 'flex', flexDirection: 'row', gap: '0.5rem', marginBottom: '2rem'}}>
                <Input type="text" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} placeholder="노래 제목, 아티스트 검색" />
                <Button as="button" type="submit" style={{padding: '0.75rem'}}><SearchIcon /></Button>
            </Form>
            
            <div style={{display: 'flex', flexDirection: 'column', gap: '0.5rem'}}>
                 {results.map((song) => (
                    <div key={song.id} style={{display: 'flex', alignItems: 'center', padding: '0.75rem', borderRadius: '0.5rem'}}>
                        <img src={`https://placehold.co/80x80/4f46e5/ffffff?text=${song.title[0]}`} alt={song.title} style={{width: '3.5rem', height: '3.5rem', borderRadius: '0.25rem', marginRight: '1rem'}} />
                        <div style={{flexGrow: 1}}>
                            <p style={{fontWeight: 600, margin: 0}}>{song.title}</p>
                            <p style={{fontSize: '0.875rem', color: '#94a3b8', margin: 0}}>{song.artist}</p>
                        </div>
                        <Button onClick={() => handleAddClick(song)} style={{fontSize: '0.875rem', padding: '0.4rem 0.8rem'}}>추가</Button>
                    </div>
                ))}
            </div>
        </PageContainer>
    );
}

// --- 메인 App 컴포넌트 ---
export default function App() {
  const [page, setPage] = useState('home');
  const [user, setUser] = useState(null); // null이면 비로그인 상태
  const [context, setContext] = useState({}); // 페이지간 데이터 전달용

  const handleLogout = () => {
    setUser(null);
    setPage('home');
    console.log("로그아웃");
    // BE: localStorage.removeItem('token');
  };

  useEffect(() => {
      const protectedPages = ['myPlaylists', 'createPlaylist', 'playlistDetail'];
      if(protectedPages.includes(page) && !user) {
          setPage('login');
      }
  }, [page, user]);

  const AppContainer = styled.div` display: flex; min-height: 100vh; @media (max-width: 768px) { flex-direction: column; } `;
  const Sidebar = styled.nav`
    width: 16rem; background-color: #020617; padding: 1.5rem; flex-shrink: 0;
    display: flex; flex-direction: column; border-right: 1px solid #1e293b;
    @media (max-width: 768px) { width: 100%; flex-direction: row; align-items: center; justify-content: space-between; padding: 1rem; box-sizing: border-box; border-right: none; border-bottom: 1px solid #1e293b; }
  `;
  const NavList = styled.ul`
    list-style: none; padding: 0; margin: 2.5rem 0 0 0; display: flex; flex-direction: column; gap: 0.5rem;
    @media (max-width: 768px) { flex-direction: row; gap: 0.5rem; margin: 0; }
  `;
  const NavItem = styled.li`
    display: flex; align-items: center; gap: 0.75rem; padding: 0.75rem; border-radius: 0.5rem;
    cursor: pointer; transition: background-color 0.2s, color 0.2s;
    background-color: ${props => props.active ? '#1e293b' : 'transparent'};
    color: ${props => props.active ? '#e2e8f0' : '#94a3b8'};
    font-weight: 500;
    &:hover { background-color: #1e293b; color: #e2e8f0; }
    span { @media (max-width: 768px) { display: none; } }
  `;
  const MainContent = styled.main` flex-grow: 1; overflow-y: auto; `;

  const renderPage = () => {
    switch (page) {
      case 'home': return <HomePage user={user} setPage={setPage} setContext={setContext} />;
      case 'login': return <LoginPage setPage={setPage} setUser={setUser} />;
      case 'signup': return <SignUpPage setPage={setPage} />;
      case 'myPlaylists': return <MyPlaylistsPage setPage={setPage} setContext={setContext} />;
      case 'playlistDetail': return <PlaylistDetailPage setPage={setPage} playlistId={context.playlistId} user={user} />;
      case 'createPlaylist': return <CreatePlaylistPage setPage={setPage} />;
      case 'search': return <SearchPage />;
      default: return <HomePage user={user} setPage={setPage} setContext={setContext} />;
    }
  };

  return (
    <>
      <GlobalStyle />
      <AppContainer>
        <Sidebar>
          <div style={{display: 'flex', alignItems: 'center', gap: '0.75rem'}}>
            <MusicIcon style={{color: '#818cf8', height: '2rem', width: '2rem'}}/>
            <h1 style={{fontSize: '1.5rem', fontWeight: '700', display: 'block' }}>MyMusic</h1>
          </div>
          <NavList>
              <NavItem active={page === 'home'} onClick={() => setPage('home')}><HomeIcon/><span>홈</span></NavItem>
              <NavItem active={['myPlaylists', 'createPlaylist', 'playlistDetail'].includes(page)} onClick={() => setPage('myPlaylists')}><PlaylistIcon/><span>내 플레이리스트</span></NavItem>
              <NavItem active={page === 'search'} onClick={() => setPage('search')}><SearchIcon/><span>검색</span></NavItem>
          </NavList>
          <div style={{marginTop: 'auto'}}>
            {user ? (
                <div style={{display: 'flex', alignItems: 'center', gap: '0.75rem', padding: '0.5rem', background: '#1e293b', borderRadius: '0.5rem'}}>
                    <img src={`https://placehold.co/100x100/4f46e5/ffffff?text=${user.nickname[0]}`} alt="profile" style={{width: '2.5rem', height: '2.5rem', borderRadius: '50%'}}/>
                    <div style={{flexGrow: 1}}>
                        <p style={{fontWeight: 600, margin: 0, fontSize: '0.875rem'}}>{user.nickname}</p>
                    </div>
                    <button onClick={handleLogout} style={{background: 'none', border: 'none', color: '#94a3b8', cursor: 'pointer', padding: '0.5rem'}} title="로그아웃"><LogoutIcon/></button>
                </div>
            ) : (
                <Button onClick={() => setPage('signup')} style={{width: '100%'}}>회원가입</Button>
            )}
          </div>
        </Sidebar>
        <MainContent>{renderPage()}</MainContent>
      </AppContainer>
    </>
  );
}

